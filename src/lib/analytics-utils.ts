// Analytics utility functions and helpers\n\nimport { analytics, trackConversion } from './analytics';\nimport { analyticsEvents, conversionGoals, userProperties } from './analytics-config';\n\n// Utility functions for common analytics operations\nexport const analyticsUtils = {\n  // Track page performance\n  trackPagePerformance: () => {\n    if (typeof window === 'undefined') return;\n    \n    // Wait for page load to complete\n    window.addEventListener('load', () => {\n      setTimeout(() => {\n        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n        \n        if (navigation) {\n          // Track Core Web Vitals\n          analytics.track('page_performance', 'performance', {\n            loadTime: navigation.loadEventEnd - navigation.navigationStart,\n            domContentLoaded: navigation.domContentLoadedEventEnd - navigation.navigationStart,\n            firstByte: navigation.responseStart - navigation.requestStart,\n            domInteractive: navigation.domInteractive - navigation.navigationStart,\n            resourcesLoaded: navigation.loadEventStart - navigation.navigationStart,\n          });\n        }\n        \n        // Track resource timing\n        const resources = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\n        const totalResourceSize = resources.reduce((sum, resource) => sum + (resource.transferSize || 0), 0);\n        const slowResources = resources.filter(resource => \n          (resource.responseEnd - resource.requestStart) > 1000\n        );\n        \n        analytics.track('resource_performance', 'performance', {\n          totalResources: resources.length,\n          totalSize: totalResourceSize,\n          slowResourcesCount: slowResources.length,\n          slowResources: slowResources.map(r => r.name.split('/').pop()).slice(0, 5),\n        });\n      }, 1000);\n    });\n  },\n  \n  // Track user journey\n  trackUserJourney: (step: string, properties?: Record<string, any>) => {\n    const journeyData = {\n      step,\n      timestamp: Date.now(),\n      url: window.location.href,\n      referrer: document.referrer,\n      ...properties,\n    };\n    \n    // Store journey in session storage\n    const existingJourney = JSON.parse(sessionStorage.getItem('user_journey') || '[]');\n    existingJourney.push(journeyData);\n    sessionStorage.setItem('user_journey', JSON.stringify(existingJourney));\n    \n    // Track the step\n    analytics.track('user_journey_step', 'engagement', journeyData);\n  },\n  \n  // Track conversion funnel\n  trackFunnelStep: (funnelName: string, step: string, stepNumber: number) => {\n    analytics.track('funnel_step', 'conversion', {\n      funnelName,\n      step,\n      stepNumber,\n      timestamp: Date.now(),\n    });\n  },\n  \n  // Track A/B test variant\n  trackABTest: (testName: string, variant: string, properties?: Record<string, any>) => {\n    // Store variant in session storage\n    sessionStorage.setItem(`ab_test_${testName}`, variant);\n    \n    analytics.track('ab_test_view', 'experiment', {\n      testName,\n      variant,\n      ...properties,\n    });\n  },\n  \n  // Track feature usage\n  trackFeatureUsage: (featureName: string, action: string, properties?: Record<string, any>) => {\n    analytics.track('feature_usage', 'engagement', {\n      featureName,\n      action,\n      ...properties,\n    });\n  },\n  \n  // Track search behavior\n  trackSearch: (query: string, results: number, filters?: Record<string, any>) => {\n    analytics.track('search_performed', 'engagement', {\n      query: query.toLowerCase(),\n      queryLength: query.length,\n      resultsCount: results,\n      hasResults: results > 0,\n      filters,\n    });\n  },\n  \n  // Track download\n  trackDownload: (fileName: string, fileType: string, fileSize?: number) => {\n    analytics.track('file_download', 'engagement', {\n      fileName,\n      fileType,\n      fileSize,\n    });\n  },\n  \n  // Track external link clicks\n  trackExternalLink: (url: string, linkText?: string) => {\n    analytics.track('external_link_click', 'navigation', {\n      url,\n      linkText,\n      domain: new URL(url).hostname,\n    });\n  },\n  \n  // Track email interactions\n  trackEmail: (action: 'open' | 'click' | 'unsubscribe', campaignId?: string) => {\n    analytics.track('email_interaction', 'engagement', {\n      action,\n      campaignId,\n    });\n  },\n  \n  // Track mobile app interactions\n  trackMobileApp: (action: string, properties?: Record<string, any>) => {\n    analytics.track('mobile_app_interaction', 'engagement', {\n      action,\n      isMobile: /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\n      ...properties,\n    });\n  },\n};\n\n// Conversion tracking utilities\nexport const conversionUtils = {\n  // Track goal completion\n  trackGoal: (goalName: string, value?: number, properties?: Record<string, any>) => {\n    const goal = Object.values(conversionGoals.primary)\n      .concat(Object.values(conversionGoals.secondary))\n      .find(g => g.name === goalName);\n    \n    if (goal) {\n      analytics.track(goal.event, goal.category, {\n        goalName,\n        goalValue: value || goal.value,\n        ...properties,\n      });\n    } else {\n      analytics.track('custom_goal', 'conversion', {\n        goalName,\n        value,\n        ...properties,\n      });\n    }\n  },\n  \n  // Track revenue\n  trackRevenue: (amount: number, currency: string = 'USD', transactionId?: string) => {\n    analytics.track('revenue', 'conversion', {\n      amount,\n      currency,\n      transactionId: transactionId || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    });\n  },\n  \n  // Track subscription\n  trackSubscription: (plan: string, amount: number, currency: string = 'USD') => {\n    analytics.track('subscription', 'conversion', {\n      plan,\n      amount,\n      currency,\n      subscriptionId: `sub_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    });\n  },\n  \n  // Track lead generation\n  trackLead: (source: string, quality: 'hot' | 'warm' | 'cold', properties?: Record<string, any>) => {\n    analytics.track('lead_generated', 'conversion', {\n      source,\n      quality,\n      leadId: `lead_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      ...properties,\n    });\n  },\n};\n\n// User identification utilities\nexport const userUtils = {\n  // Identify user with properties\n  identifyUser: (userId: string, properties?: Record<string, any>) => {\n    const userProps = {\n      [userProperties.userId]: userId,\n      [userProperties.registrationDate]: new Date().toISOString(),\n      ...properties,\n    };\n    \n    analytics.identify(userId, userProps);\n  },\n  \n  // Update user properties\n  updateUserProperties: (properties: Record<string, any>) => {\n    const currentUserId = localStorage.getItem('primebody_user_id');\n    if (currentUserId) {\n      analytics.identify(currentUserId, properties);\n    }\n  },\n  \n  // Track user lifecycle events\n  trackUserLifecycle: (event: 'signup' | 'activation' | 'retention' | 'churn', properties?: Record<string, any>) => {\n    analytics.track(`user_${event}`, 'conversion', {\n      lifecycleStage: event,\n      ...properties,\n    });\n  },\n};\n\n// Session tracking utilities\nexport const sessionUtils = {\n  // Start session tracking\n  startSession: () => {\n    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    sessionStorage.setItem('primebody_session_id', sessionId);\n    sessionStorage.setItem('primebody_session_start', Date.now().toString());\n    \n    analytics.track('session_start', 'engagement', {\n      sessionId,\n    });\n    \n    return sessionId;\n  },\n  \n  // End session tracking\n  endSession: () => {\n    const sessionId = sessionStorage.getItem('primebody_session_id');\n    const sessionStart = sessionStorage.getItem('primebody_session_start');\n    \n    if (sessionId && sessionStart) {\n      const sessionDuration = Date.now() - parseInt(sessionStart);\n      \n      analytics.track('session_end', 'engagement', {\n        sessionId,\n        sessionDuration,\n      });\n    }\n  },\n  \n  // Get current session info\n  getSessionInfo: () => {\n    return {\n      sessionId: sessionStorage.getItem('primebody_session_id'),\n      sessionStart: sessionStorage.getItem('primebody_session_start'),\n      sessionDuration: sessionStorage.getItem('primebody_session_start') \n        ? Date.now() - parseInt(sessionStorage.getItem('primebody_session_start')!) \n        : 0,\n    };\n  },\n};\n\n// Error tracking utilities\nexport const errorUtils = {\n  // Track JavaScript errors\n  trackJSError: (error: Error, context?: string) => {\n    analytics.track('javascript_error', 'error', {\n      errorMessage: error.message,\n      errorStack: error.stack,\n      errorName: error.name,\n      context,\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n    });\n  },\n  \n  // Track API errors\n  trackAPIError: (endpoint: string, status: number, message: string) => {\n    analytics.track('api_error', 'error', {\n      endpoint,\n      status,\n      message,\n      url: window.location.href,\n    });\n  },\n  \n  // Track validation errors\n  trackValidationError: (field: string, value: string, rule: string) => {\n    analytics.track('validation_error', 'error', {\n      field,\n      value: value.substring(0, 50), // Truncate for privacy\n      rule,\n    });\n  },\n};\n\n// Performance tracking utilities\nexport const performanceUtils = {\n  // Track component render time\n  trackComponentRender: (componentName: string, renderTime: number) => {\n    analytics.track('component_render', 'performance', {\n      componentName,\n      renderTime,\n      isSlowRender: renderTime > 16, // Slower than 60fps\n    });\n  },\n  \n  // Track API response time\n  trackAPIPerformance: (endpoint: string, responseTime: number, success: boolean) => {\n    analytics.track('api_performance', 'performance', {\n      endpoint,\n      responseTime,\n      success,\n      isSlowResponse: responseTime > 1000,\n    });\n  },\n  \n  // Track bundle size\n  trackBundleSize: (bundleName: string, size: number) => {\n    analytics.track('bundle_size', 'performance', {\n      bundleName,\n      size,\n      sizeKB: Math.round(size / 1024),\n    });\n  },\n};\n\n// Privacy utilities\nexport const privacyUtils = {\n  // Check if user has given consent\n  hasConsent: (): boolean => {\n    return localStorage.getItem('primebody_analytics_consent') === 'true';\n  },\n  \n  // Get consent preferences\n  getConsentPreferences: () => {\n    return {\n      analytics: localStorage.getItem('primebody_analytics_consent') === 'true',\n      marketing: localStorage.getItem('primebody_marketing_consent') === 'true',\n      functional: localStorage.getItem('primebody_functional_consent') === 'true',\n    };\n  },\n  \n  // Clear user data\n  clearUserData: () => {\n    // Clear localStorage\n    Object.keys(localStorage).forEach(key => {\n      if (key.startsWith('primebody_')) {\n        localStorage.removeItem(key);\n      }\n    });\n    \n    // Clear sessionStorage\n    Object.keys(sessionStorage).forEach(key => {\n      if (key.startsWith('primebody_')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n    \n    // Track data clearing\n    analytics.track('user_data_cleared', 'privacy', {\n      timestamp: Date.now(),\n    });\n  },\n  \n  // Export user data\n  exportUserData: () => {\n    const userData = {\n      localStorage: {} as Record<string, string>,\n      sessionStorage: {} as Record<string, string>,\n      analytics: analytics.getStatus(),\n    };\n    \n    // Collect localStorage data\n    Object.keys(localStorage).forEach(key => {\n      if (key.startsWith('primebody_')) {\n        userData.localStorage[key] = localStorage.getItem(key) || '';\n      }\n    });\n    \n    // Collect sessionStorage data\n    Object.keys(sessionStorage).forEach(key => {\n      if (key.startsWith('primebody_')) {\n        userData.sessionStorage[key] = sessionStorage.getItem(key) || '';\n      }\n    });\n    \n    return userData;\n  },\n};\n\n// Utility to initialize all tracking\nexport const initializeTracking = () => {\n  // Track page performance\n  analyticsUtils.trackPagePerformance();\n  \n  // Start session\n  sessionUtils.startSession();\n  \n  // Set up error tracking\n  window.addEventListener('error', (event) => {\n    errorUtils.trackJSError(event.error, 'Global error handler');\n  });\n  \n  window.addEventListener('unhandledrejection', (event) => {\n    errorUtils.trackJSError(new Error(event.reason), 'Unhandled promise rejection');\n  });\n  \n  // Track page visibility changes\n  document.addEventListener('visibilitychange', () => {\n    if (document.visibilityState === 'hidden') {\n      sessionUtils.endSession();\n    } else {\n      sessionUtils.startSession();\n    }\n  });\n  \n  // Track page unload\n  window.addEventListener('beforeunload', () => {\n    sessionUtils.endSession();\n  });\n};\n\n// Export all utilities\nexport {\n  analyticsUtils,\n  conversionUtils,\n  userUtils,\n  sessionUtils,\n  errorUtils,\n  performanceUtils,\n  privacyUtils,\n};"