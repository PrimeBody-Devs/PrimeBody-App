'use client';

import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Button, ButtonProps } from '@/components/ui/button';\nimport { Card, CardProps } from '@/components/ui/card';\nimport { useClickTracking, useVisibilityTracking, useFormTracking } from '@/hooks/use-analytics';\nimport { trackConversion } from '@/lib/analytics';\n\n// Tracked Button Component\ninterface TrackedButtonProps extends ButtonProps {\n  trackingName?: string;\n  trackingCategory?: 'cta' | 'navigation' | 'action' | 'social';\n  trackingProperties?: Record<string, any>;\n  ctaText?: string;\n  ctaLocation?: string;\n}\n\nexport const TrackedButton = forwardRef<HTMLButtonElement, TrackedButtonProps>(\n  ({ \n    trackingName, \n    trackingCategory = 'action',\n    trackingProperties,\n    ctaText,\n    ctaLocation,\n    onClick,\n    children,\n    ...props \n  }, ref) => {\n    const { trackClick, trackCTAClick, trackButtonClick } = useClickTracking();\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      // Track based on category\n      if (trackingCategory === 'cta' && ctaText && ctaLocation) {\n        trackCTAClick(ctaText, ctaLocation)(event);\n      } else if (trackingName) {\n        const eventName = trackingName || `button_${trackingCategory}_click`;\n        trackClick(eventName, {\n          buttonText: typeof children === 'string' ? children : 'button',\n          category: trackingCategory,\n          ...trackingProperties,\n        })(event);\n      } else {\n        trackButtonClick(\n          typeof children === 'string' ? children : 'button',\n          trackingCategory\n        )(event);\n      }\n\n      // Call original onClick if provided\n      onClick?.(event);\n    };\n\n    return (\n      <Button ref={ref} onClick={handleClick} {...props}>\n        {children}\n      </Button>\n    );\n  }\n);\n\nTrackedButton.displayName = 'TrackedButton';\n\n// Tracked Link Component\ninterface TrackedLinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  trackingName?: string;\n  trackingProperties?: Record<string, any>;\n  external?: boolean;\n}\n\nexport const TrackedLink = forwardRef<HTMLAnchorElement, TrackedLinkProps>(\n  ({ \n    trackingName = 'link_click',\n    trackingProperties,\n    external = false,\n    onClick,\n    children,\n    href,\n    ...props \n  }, ref) => {\n    const { trackLinkClick } = useClickTracking();\n\n    const handleClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\n      trackLinkClick(\n        typeof children === 'string' ? children : 'link',\n        href || '#'\n      )(event);\n\n      // Track external links\n      if (external) {\n        trackConversion.socialShare('external_link', href || '');\n      }\n\n      onClick?.(event);\n    };\n\n    return (\n      <a \n        ref={ref} \n        href={href}\n        onClick={handleClick} \n        {...(external ? { target: '_blank', rel: 'noopener noreferrer' } : {})}\n        {...props}\n      >\n        {children}\n      </a>\n    );\n  }\n);\n\nTrackedLink.displayName = 'TrackedLink';\n\n// Tracked Section Component (for visibility tracking)\ninterface TrackedSectionProps extends React.HTMLAttributes<HTMLElement> {\n  sectionName: string;\n  trackingProperties?: Record<string, any>;\n  visibilityThreshold?: number;\n  as?: keyof JSX.IntrinsicElements;\n}\n\nexport const TrackedSection = forwardRef<HTMLElement, TrackedSectionProps>(\n  ({ \n    sectionName,\n    trackingProperties,\n    visibilityThreshold = 0.5,\n    as: Component = 'section',\n    children,\n    ...props \n  }, ref) => {\n    const elementRef = useRef<HTMLElement>(null);\n    \n    // Combine refs\n    const combinedRef = (node: HTMLElement) => {\n      elementRef.current = node;\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    };\n\n    // Track visibility\n    useVisibilityTracking(\n      elementRef,\n      'section_view',\n      {\n        sectionName,\n        ...trackingProperties,\n      },\n      visibilityThreshold\n    );\n\n    return (\n      <Component ref={combinedRef} {...props}>\n        {children}\n      </Component>\n    );\n  }\n);\n\nTrackedSection.displayName = 'TrackedSection';\n\n// Tracked Card Component\ninterface TrackedCardProps extends CardProps {\n  cardName: string;\n  trackingProperties?: Record<string, any>;\n  trackClicks?: boolean;\n  trackVisibility?: boolean;\n}\n\nexport const TrackedCard = forwardRef<HTMLDivElement, TrackedCardProps>(\n  ({ \n    cardName,\n    trackingProperties,\n    trackClicks = true,\n    trackVisibility = true,\n    onClick,\n    children,\n    ...props \n  }, ref) => {\n    const elementRef = useRef<HTMLDivElement>(null);\n    const { trackClick } = useClickTracking();\n    \n    // Combine refs\n    const combinedRef = (node: HTMLDivElement) => {\n      elementRef.current = node;\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    };\n\n    // Track visibility if enabled\n    if (trackVisibility) {\n      useVisibilityTracking(\n        elementRef,\n        'card_view',\n        {\n          cardName,\n          ...trackingProperties,\n        }\n      );\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n      if (trackClicks) {\n        trackClick('card_click', {\n          cardName,\n          ...trackingProperties,\n        })(event);\n      }\n\n      onClick?.(event);\n    };\n\n    return (\n      <Card ref={combinedRef} onClick={handleClick} {...props}>\n        {children}\n      </Card>\n    );\n  }\n);\n\nTrackedCard.displayName = 'TrackedCard';\n\n// Tracked Form Component\ninterface TrackedFormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  formName: string;\n  trackingProperties?: Record<string, any>;\n}\n\nexport const TrackedForm = forwardRef<HTMLFormElement, TrackedFormProps>(\n  ({ \n    formName,\n    trackingProperties,\n    onSubmit,\n    onFocus,\n    children,\n    ...props \n  }, ref) => {\n    const {\n      trackFormStart,\n      trackFormComplete,\n      trackFormError,\n      trackFieldFocus,\n    } = useFormTracking(formName);\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      \n      try {\n        // Track form completion\n        const formData = new FormData(event.currentTarget);\n        const formObject = Object.fromEntries(formData.entries());\n        trackFormComplete(formObject);\n        \n        onSubmit?.(event);\n      } catch (error) {\n        trackFormError('submission', (error as Error).message);\n      }\n    };\n\n    const handleFocus = (event: React.FocusEvent<HTMLFormElement>) => {\n      // Track form start on first focus\n      trackFormStart();\n      \n      // Track field focus\n      const target = event.target as HTMLInputElement;\n      if (target.name) {\n        trackFieldFocus(target.name);\n      }\n      \n      onFocus?.(event);\n    };\n\n    return (\n      <form \n        ref={ref} \n        onSubmit={handleSubmit} \n        onFocus={handleFocus}\n        {...props}\n      >\n        {children}\n      </form>\n    );\n  }\n);\n\nTrackedForm.displayName = 'TrackedForm';\n\n// Tracked Image Component\ninterface TrackedImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  imageName: string;\n  trackingProperties?: Record<string, any>;\n  trackLoad?: boolean;\n  trackError?: boolean;\n}\n\nexport const TrackedImage = forwardRef<HTMLImageElement, TrackedImageProps>(\n  ({ \n    imageName,\n    trackingProperties,\n    trackLoad = true,\n    trackError = true,\n    onLoad,\n    onError,\n    ...props \n  }, ref) => {\n    const { trackClick } = useClickTracking();\n\n    const handleLoad = (event: React.SyntheticEvent<HTMLImageElement>) => {\n      if (trackLoad) {\n        trackClick('image_load', {\n          imageName,\n          imageUrl: props.src,\n          ...trackingProperties,\n        })(event as any);\n      }\n      \n      onLoad?.(event);\n    };\n\n    const handleError = (event: React.SyntheticEvent<HTMLImageElement>) => {\n      if (trackError) {\n        trackClick('image_error', {\n          imageName,\n          imageUrl: props.src,\n          ...trackingProperties,\n        })(event as any);\n      }\n      \n      onError?.(event);\n    };\n\n    return (\n      <img \n        ref={ref}\n        onLoad={handleLoad}\n        onError={handleError}\n        {...props}\n      />\n    );\n  }\n);\n\nTrackedImage.displayName = 'TrackedImage';\n\n// Tracked Video Component\ninterface TrackedVideoProps extends React.VideoHTMLAttributes<HTMLVideoElement> {\n  videoName: string;\n  trackingProperties?: Record<string, any>;\n}\n\nexport const TrackedVideo = forwardRef<HTMLVideoElement, TrackedVideoProps>(\n  ({ \n    videoName,\n    trackingProperties,\n    onPlay,\n    onPause,\n    onEnded,\n    onTimeUpdate,\n    ...props \n  }, ref) => {\n    const { trackClick } = useClickTracking();\n    const playStartTime = useRef<number>(0);\n    const lastTrackedProgress = useRef<number>(0);\n\n    const handlePlay = (event: React.SyntheticEvent<HTMLVideoElement>) => {\n      playStartTime.current = Date.now();\n      trackClick('video_play', {\n        videoName,\n        ...trackingProperties,\n      })(event as any);\n      \n      onPlay?.(event);\n    };\n\n    const handlePause = (event: React.SyntheticEvent<HTMLVideoElement>) => {\n      const playDuration = Date.now() - playStartTime.current;\n      trackClick('video_pause', {\n        videoName,\n        playDuration,\n        currentTime: event.currentTarget.currentTime,\n        ...trackingProperties,\n      })(event as any);\n      \n      onPause?.(event);\n    };\n\n    const handleEnded = (event: React.SyntheticEvent<HTMLVideoElement>) => {\n      const totalDuration = Date.now() - playStartTime.current;\n      trackClick('video_complete', {\n        videoName,\n        totalDuration,\n        videoDuration: event.currentTarget.duration,\n        ...trackingProperties,\n      })(event as any);\n      \n      onEnded?.(event);\n    };\n\n    const handleTimeUpdate = (event: React.SyntheticEvent<HTMLVideoElement>) => {\n      const video = event.currentTarget;\n      const progress = Math.floor((video.currentTime / video.duration) * 100);\n      \n      // Track progress at 25%, 50%, 75%\n      if (progress >= 25 && lastTrackedProgress.current < 25) {\n        trackClick('video_progress_25', { videoName, ...trackingProperties })(event as any);\n        lastTrackedProgress.current = 25;\n      } else if (progress >= 50 && lastTrackedProgress.current < 50) {\n        trackClick('video_progress_50', { videoName, ...trackingProperties })(event as any);\n        lastTrackedProgress.current = 50;\n      } else if (progress >= 75 && lastTrackedProgress.current < 75) {\n        trackClick('video_progress_75', { videoName, ...trackingProperties })(event as any);\n        lastTrackedProgress.current = 75;\n      }\n      \n      onTimeUpdate?.(event);\n    };\n\n    return (\n      <video \n        ref={ref}\n        onPlay={handlePlay}\n        onPause={handlePause}\n        onEnded={handleEnded}\n        onTimeUpdate={handleTimeUpdate}\n        {...props}\n      />\n    );\n  }\n);\n\nTrackedVideo.displayName = 'TrackedVideo';\n\n// Social Share Tracking Component\ninterface SocialShareProps {\n  platform: string;\n  url?: string;\n  text?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function SocialShare({ platform, url, text, children, className }: SocialShareProps) {\n  const { trackSocialShare } = useSocialTracking();\n\n  const handleShare = () => {\n    const shareUrl = url || window.location.href;\n    const shareText = text || document.title;\n    \n    trackSocialShare(platform, shareText, shareUrl);\n    \n    // Open share URL\n    const shareUrls = {\n      twitter: `https://twitter.com/intent/tweet?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareText)}`,\n      facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`,\n      linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}`,\n      telegram: `https://t.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareText)}`,\n      whatsapp: `https://wa.me/?text=${encodeURIComponent(`${shareText} ${shareUrl}`)}`,\n    };\n    \n    const shareUrlForPlatform = shareUrls[platform as keyof typeof shareUrls];\n    if (shareUrlForPlatform) {\n      window.open(shareUrlForPlatform, '_blank', 'width=600,height=400');\n    }\n  };\n\n  return (\n    <button onClick={handleShare} className={className}>\n      {children}\n    </button>\n  );\n}\n\n// Import hook for social tracking\nimport { useSocialTracking } from '@/hooks/use-analytics';"