'use client';

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { analytics } from '@/lib/analytics';

// Analytics context interface
interface AnalyticsContextType {
  isInitialized: boolean;
  consentGiven: boolean;
  updateConsent: (consent: boolean) => Promise<void>;
  getStatus: () => any;
}\n\n// Create analytics context\nconst AnalyticsContext = createContext<AnalyticsContextType | undefined>(undefined);\n\n// Analytics provider props\ninterface AnalyticsProviderProps {\n  children: ReactNode;\n  autoInitialize?: boolean;\n  requireConsent?: boolean;\n}\n\n// Analytics provider component\nexport function AnalyticsProvider({ \n  children, \n  autoInitialize = true,\n  requireConsent = true \n}: AnalyticsProviderProps) {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [consentGiven, setConsentGiven] = useState(false);\n\n  // Initialize analytics on mount\n  useEffect(() => {\n    const initializeAnalytics = async () => {\n      try {\n        // Check for stored consent\n        const storedConsent = localStorage.getItem('primebody_analytics_consent');\n        const hasConsent = storedConsent === 'true';\n        \n        // If consent is not required or already given, initialize\n        if (!requireConsent || hasConsent) {\n          await analytics.initialize(hasConsent);\n          setConsentGiven(hasConsent);\n        }\n        \n        setIsInitialized(true);\n      } catch (error) {\n        console.error('Failed to initialize analytics:', error);\n      }\n    };\n\n    if (autoInitialize) {\n      initializeAnalytics();\n    }\n  }, [autoInitialize, requireConsent]);\n\n  // Update consent function\n  const updateConsent = async (consent: boolean) => {\n    try {\n      // Store consent preference\n      localStorage.setItem('primebody_analytics_consent', consent.toString());\n      \n      // Update analytics consent\n      await analytics.updateConsent(consent);\n      \n      // If not initialized yet and consent is given, initialize now\n      if (!isInitialized && consent) {\n        await analytics.initialize(consent);\n        setIsInitialized(true);\n      }\n      \n      setConsentGiven(consent);\n    } catch (error) {\n      console.error('Failed to update analytics consent:', error);\n    }\n  };\n\n  // Get analytics status\n  const getStatus = () => {\n    return analytics.getStatus();\n  };\n\n  const contextValue: AnalyticsContextType = {\n    isInitialized,\n    consentGiven,\n    updateConsent,\n    getStatus,\n  };\n\n  return (\n    <AnalyticsContext.Provider value={contextValue}>\n      {children}\n    </AnalyticsContext.Provider>\n  );\n}\n\n// Hook to use analytics context\nexport function useAnalyticsContext() {\n  const context = useContext(AnalyticsContext);\n  if (context === undefined) {\n    throw new Error('useAnalyticsContext must be used within an AnalyticsProvider');\n  }\n  return context;\n}\n\n// Analytics consent banner component\ninterface ConsentBannerProps {\n  onAccept?: () => void;\n  onDecline?: () => void;\n  className?: string;\n}\n\nexport function ConsentBanner({ onAccept, onDecline, className }: ConsentBannerProps) {\n  const { consentGiven, updateConsent } = useAnalyticsContext();\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    // Show banner if consent hasn't been given and no stored preference\n    const storedConsent = localStorage.getItem('primebody_analytics_consent');\n    if (!storedConsent && !consentGiven) {\n      setIsVisible(true);\n    }\n  }, [consentGiven]);\n\n  const handleAccept = async () => {\n    await updateConsent(true);\n    setIsVisible(false);\n    onAccept?.();\n  };\n\n  const handleDecline = async () => {\n    await updateConsent(false);\n    setIsVisible(false);\n    onDecline?.();\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className={`fixed bottom-0 left-0 right-0 z-50 bg-background border-t shadow-lg p-4 ${className}`}>\n      <div className=\"max-w-6xl mx-auto flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div className=\"flex-1\">\n          <h3 className=\"font-semibold text-sm mb-1\">\n            Mejora tu experiencia con PrimeBody\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Utilizamos cookies y análisis para mejorar tu experiencia, personalizar contenido \n            y entender cómo interactúas con nuestra plataforma. Tus datos están seguros y \n            puedes cambiar tus preferencias en cualquier momento.\n          </p>\n        </div>\n        \n        <div className=\"flex gap-3 shrink-0\">\n          <button\n            onClick={handleDecline}\n            className=\"px-4 py-2 text-sm border border-border rounded-md hover:bg-muted transition-colors\"\n          >\n            Solo esenciales\n          </button>\n          <button\n            onClick={handleAccept}\n            className=\"px-4 py-2 text-sm bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors\"\n          >\n            Aceptar todo\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Analytics settings component\ninterface AnalyticsSettingsProps {\n  className?: string;\n}\n\nexport function AnalyticsSettings({ className }: AnalyticsSettingsProps) {\n  const { consentGiven, updateConsent, getStatus } = useAnalyticsContext();\n  const [status, setStatus] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setStatus(getStatus());\n  }, [getStatus, consentGiven]);\n\n  const handleToggleConsent = async () => {\n    setIsLoading(true);\n    try {\n      await updateConsent(!consentGiven);\n      setStatus(getStatus());\n    } catch (error) {\n      console.error('Failed to toggle consent:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div>\n        <h3 className=\"font-semibold mb-2\">Configuración de Análisis</h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Controla cómo recopilamos y utilizamos datos para mejorar tu experiencia.\n        </p>\n      </div>\n\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n          <div>\n            <h4 className=\"font-medium text-sm\">Análisis y Cookies</h4>\n            <p className=\"text-xs text-muted-foreground\">\n              Nos ayuda a entender cómo usas PrimeBody para mejorar la experiencia\n            </p>\n          </div>\n          <button\n            onClick={handleToggleConsent}\n            disabled={isLoading}\n            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n              consentGiven ? 'bg-primary' : 'bg-muted'\n            } ${isLoading ? 'opacity-50' : ''}`}\n          >\n            <span\n              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                consentGiven ? 'translate-x-6' : 'translate-x-1'\n              }`}\n            />\n          </button>\n        </div>\n\n        {status && (\n          <div className=\"p-3 bg-muted rounded-lg\">\n            <h4 className=\"font-medium text-sm mb-2\">Estado del Sistema</h4>\n            <div className=\"space-y-1 text-xs\">\n              <div className=\"flex justify-between\">\n                <span>Inicializado:</span>\n                <span className={status.initialized ? 'text-green-600' : 'text-red-600'}>\n                  {status.initialized ? 'Sí' : 'No'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Consentimiento:</span>\n                <span className={status.consentGiven ? 'text-green-600' : 'text-red-600'}>\n                  {status.consentGiven ? 'Otorgado' : 'No otorgado'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Proveedores activos:</span>\n                <span>{status.providers?.length || 0}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Eventos en cola:</span>\n                <span>{status.queuedEvents || 0}</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"text-xs text-muted-foreground\">\n        <p>\n          Puedes cambiar estas preferencias en cualquier momento. \n          Para más información, consulta nuestra{' '}\n          <a href=\"/privacy\" className=\"underline hover:no-underline\">\n            política de privacidad\n          </a>.\n        </p>\n      </div>\n    </div>\n  );\n}\n\n// Debug component for development\nexport function AnalyticsDebug() {\n  const { getStatus } = useAnalyticsContext();\n  const [status, setStatus] = useState<any>(null);\n  const [events, setEvents] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'development') return;\n\n    const updateStatus = () => {\n      setStatus(getStatus());\n    };\n\n    // Update status every second\n    const interval = setInterval(updateStatus, 1000);\n    updateStatus();\n\n    return () => clearInterval(interval);\n  }, [getStatus]);\n\n  // Listen for analytics events in development\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'development') return;\n\n    const originalConsoleLog = console.log;\n    console.log = (...args) => {\n      if (args[0] === '📊 Analytics Event:') {\n        setEvents(prev => [args[1], ...prev.slice(0, 9)]); // Keep last 10 events\n      }\n      originalConsoleLog.apply(console, args);\n    };\n\n    return () => {\n      console.log = originalConsoleLog;\n    };\n  }, []);\n\n  if (process.env.NODE_ENV !== 'development') return null;\n\n  return (\n    <div className=\"fixed top-4 left-4 z-50 bg-background border rounded-lg p-4 max-w-sm shadow-lg\">\n      <h3 className=\"font-semibold text-sm mb-2\">Analytics Debug</h3>\n      \n      {status && (\n        <div className=\"space-y-2 text-xs\">\n          <div className=\"grid grid-cols-2 gap-2\">\n            <div>Initialized: {status.initialized ? '✅' : '❌'}</div>\n            <div>Consent: {status.consentGiven ? '✅' : '❌'}</div>\n            <div>Providers: {status.providers?.length || 0}</div>\n            <div>Queued: {status.queuedEvents || 0}</div>\n          </div>\n          \n          {status.providers && status.providers.length > 0 && (\n            <div>\n              <div className=\"font-medium\">Providers:</div>\n              {status.providers.map((provider: any, index: number) => (\n                <div key={index} className=\"ml-2\">\n                  {provider.name}: {provider.enabled ? '✅' : '❌'}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {events.length > 0 && (\n        <div className=\"mt-4\">\n          <div className=\"font-medium text-xs mb-2\">Recent Events:</div>\n          <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n            {events.map((event, index) => (\n              <div key={index} className=\"text-xs p-1 bg-muted rounded\">\n                <div className=\"font-medium\">{event.name}</div>\n                <div className=\"text-muted-foreground\">{event.category}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"